{"version":3,"file":"static/js/168.20187184.chunk.js","mappings":"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","sources":["Extension/Extension.js"],"sourcesContent":["import React from \"react\";\n\nimport Plotly from \"plotly.js/dist/plotly\";\nimport * as d3 from \"d3\";\n\nimport extensionStyles from \"./Extension.module.css\";\n\nexport default function Extension() {\n  const [varToPlot, setVarToPlot] = React.useState(\"P\");\n\n  const axesLabels = {\n    P: \"Pressure (hPa)\",\n    T: \"Temperature (C)\",\n    L: \"Lapse rate (ºK/m)\",\n    Tboil: \"Boiling Point (ºC)\",\n    Tdew: \"Dew Point (ºC)\",\n  };\n\n  const T0 = 15;\n  const Tstar = 100;\n  const P0 = 1013.25;\n  const Pstar = P0;\n  const Md = 0.02896;\n  const Mv = 0.01802;\n  const R = 8.314;\n  const g = 9.8076;\n  const deltaHv = 2_501_000;\n  const cpd = 1003.5;\n  const Rsd = 287;\n  const Rsw = 461.5;\n  const a = 17.625;\n  const b = 243.04;\n  const deltaH = 45.07 * 1000;\n\n  let zData = [];\n\n  React.useEffect(() => {\n    zData = [];\n\n    for (let U = 0; U <= 1; U += 0.01) {\n      //T by default in celsius\n      const pressures = [];\n\n      const deltah = 100;\n      let L;\n      let T = T0;\n      let P = P0;\n      for (let h = deltah; h <= 11000; h += deltah) {\n        const Es = 6.1121 * Math.exp((18.678 - T / 234.5) * (T / (T + 257.14)));\n\n        const r = (Rsd / Rsw) * ((U * Es) / (P - U * Es));\n\n        L =\n          g *\n          ((1 + (r * deltaHv) / (Rsd * (T + 273))) /\n            (cpd + (deltaHv ** 2 * r) / (Rsw * (T + 273) ** 2)));\n\n        const deltaP =\n          -((Md * g) / (R * (T + 273))) *\n          (P - U * (1 - Mv / Md) * Es * T) *\n          deltah;\n\n        P += deltaP;\n\n        const Tboil =\n          1 / (1 / (Tstar + 273) - (R / deltaH) * Math.log(P / Pstar)) - 273;\n\n        const Tdew =\n          (b * (Math.log(U) + (a * T) / (b + T))) /\n          (a - Math.log(U) - (a * T) / (b + T));\n\n        T -= L * deltah;\n\n        switch (varToPlot) {\n          case \"P\":\n            pressures.push(P);\n            break;\n          case \"T\":\n            pressures.push(T);\n            break;\n          case \"L\":\n            pressures.push(L * 1000);\n            break;\n          case \"Tboil\":\n            pressures.push(Tboil);\n            break;\n          case \"Tdew\":\n            pressures.push(Tdew);\n            break;\n          default:\n            pressures.push(P);\n            break;\n        }\n      }\n      zData.push(pressures);\n    }\n  }, [varToPlot]);\n\n  React.useEffect(() => {\n    const x = Array(zData.length)\n      .fill(0)\n      .map((_, i) => i * 0.01);\n\n    const y = Array(zData[0].length)\n      .fill(0)\n      .map((_, i) => i * 100);\n\n    // fill in 'text' array for hover\n    var text = x.map((xi, i) =>\n      y.map(\n        (yi, j) =>\n          `Relative Humidity: ${d3.format(\".2f\")(xi)}<br>Altitude (m): ${yi}<br>${\n            axesLabels[varToPlot]\n          }: ${d3.format(\".4f\")(zData[i][j])}`\n      )\n    );\n\n    const data = [\n      {\n        z: zData,\n        x: y,\n        y: x,\n        type: \"surface\",\n        text: text,\n        hoverinfo: \"text\",\n        showlegend: false,\n      },\n    ];\n\n    const layout = {\n      title: `${axesLabels[varToPlot]} against Altitude and Relative Humidity`,\n      font: {\n        size: 9,\n      },\n      autosize: true,\n      width: 400,\n      height: 400,\n      margin: {\n        l: 0,\n        r: 0,\n        b: 0,\n        t: 100,\n        pad: 0,\n      },\n      scene: {\n        yaxis: {\n          title: \"Relative Humidity\",\n          titlefont: {\n            size: 10,\n            color: \"#7f7f7f\",\n          },\n        },\n        xaxis: {\n          title: \"Altitude (m)\",\n          titlefont: {\n            size: 10,\n            color: \"#7f7f7f\",\n          },\n        },\n        zaxis: {\n          title: axesLabels[varToPlot],\n          titlefont: {\n            size: 10,\n            color: \"#7f7f7f\",\n          },\n        },\n      },\n    };\n    Plotly.newPlot(\"myDiv\", data, layout);\n  }, [varToPlot]);\n\n  return (\n    <main>\n      <h1>Extension - 3D Graph</h1>\n      <p>\n        As the different variables being calculated in task 3 (pressure,\n        temperature...) are affected by both relative humidity and altitude, I\n        thought a 3d surface would be a nice way visualisation.\n      </p>\n      <p>\n        The graph is interactive - you can rotate it by dragging with the cursor\n        and resize it by scrolling. You can also change the variable to plot\n        with the dropdown menu below.\n      </p>\n\n      <select\n        value={varToPlot}\n        onChangeCapture={(e) => setVarToPlot(e.target.value)}\n      >\n        <option value=\"P\">Pressure</option>\n        <option value=\"T\">Temperature</option>\n        <option value=\"L\">Lapse Rate</option>\n        <option value=\"Tboil\">Boiling Point</option>\n        <option value=\"Tdew\">Dew Point</option>\n      </select>\n\n      <div id=\"myDiv\" style={{marginBottom: \"3rem\"}}></div>\n    </main>\n  );\n}\n"],"names":["Extension","React","varToPlot","setVarToPlot","axesLabels","P","T","L","Tboil","Tdew","P0","Md","g","deltaHv","a","b","zData","U","pressures","deltah","h","Es","Math","exp","r","log","push","x","Array","length","fill","map","_","i","y","text","xi","yi","j","d3","data","z","type","hoverinfo","showlegend","layout","title","font","size","autosize","width","height","margin","l","t","pad","scene","yaxis","titlefont","color","xaxis","zaxis","Plotly","value","onChangeCapture","e","target","id","style","marginBottom"],"sourceRoot":""}